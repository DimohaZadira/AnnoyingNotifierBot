#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ Markdown
"""

import asyncio
from notification_manager import NotificationManager

class MockBot:
    """–ú–æ–∫-–æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self):
        self.send_count = 0
        self.fail_first = True  # –ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å HTML –º–æ–∂–µ—Ç "—É–ø–∞—Å—Ç—å"
    
    async def send_message(self, chat_id: int, text: str, parse_mode: str = None, message_thread_id: int = None):
        """–ò–º–∏—Ç–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è"""
        self.send_count += 1
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–µ —Å HTML
        if self.fail_first and parse_mode == 'HTML' and self.send_count == 1:
            self.fail_first = False
            raise Exception("Can't parse entities: can't find end of the entity starting at byte offset 15")
        
        topic_info = f" (topic: {message_thread_id})" if message_thread_id else " (main chat)"
        parse_info = f" [{parse_mode}]" if parse_mode else " [no markup]"
        print(f"ü§ñ –ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ —á–∞—Ç {chat_id}{topic_info}{parse_info}:")
        print(f"   {text}")
        print()
    
    async def get_chat_member(self, chat_id: int, user_id):
        """–ò–º–∏—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        if isinstance(user_id, int):
            class MockUser:
                def __init__(self, user_id):
                    self.id = user_id
                    self.username = f"user{user_id}"
                    self.first_name = f"User{user_id}"
            
            class MockChatMember:
                def __init__(self, user_id):
                    self.user = MockUser(user_id)
            
            return MockChatMember(user_id)
        else:
            raise Exception(f"User {user_id} not found in chat")

async def test_markdown_fix():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ Markdown"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ Markdown")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫-–±–æ—Ç –∏ –º–µ–Ω–µ–¥–∂–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    mock_bot = MockBot()
    notification_manager = NotificationManager(mock_bot, "test_markdown_fix_notifications.json")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–æ–±–ª–µ–º–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
    test_cases = [
        {
            "name": "–°–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º",
            "message": "–ü–æ—Ä–∞ –ø–∏—Ç—å –≤–æ–¥—É!",
            "tagged_users": [123, "dimoha_zadira"]
        },
        {
            "name": "–°–æ–æ–±—â–µ–Ω–∏–µ —Å Markdown —Å–∏–º–≤–æ–ª–∞–º–∏",
            "message": "–ü–æ—Ä–∞ –ø–∏—Ç—å –≤–æ–¥—É! *–∂–∏—Ä–Ω—ã–π* _–∫—É—Ä—Å–∏–≤_ [—Å—Å—ã–ª–∫–∞](http://example.com)",
            "tagged_users": [456, "test_user"]
        },
        {
            "name": "–°–æ–æ–±—â–µ–Ω–∏–µ —Å HTML —Å–∏–º–≤–æ–ª–∞–º–∏",
            "message": "–ü–æ—Ä–∞ –ø–∏—Ç—å –≤–æ–¥—É! <b>–∂–∏—Ä–Ω—ã–π</b> <i>–∫—É—Ä—Å–∏–≤</i>",
            "tagged_users": [789, "html_user"]
        },
        {
            "name": "–°–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏",
            "message": "–ü–æ—Ä–∞ –ø–∏—Ç—å –≤–æ–¥—É! (—Å–∫–æ–±–∫–∏) [–∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ] {—Ñ–∏–≥—É—Ä–Ω—ã–µ}",
            "tagged_users": [111, "special_user"]
        }
    ]
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"\nüìã –¢–µ—Å—Ç {i}: {test_case['name']}")
        print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {test_case['message']}")
        print(f"   –¢–µ–≥–∏: {test_case['tagged_users']}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        await notification_manager.start_notification(
            -1001234567890, test_case['message'], 30, "09:00", test_case['tagged_users']
        )
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        active_notifications = notification_manager.get_active_notifications()
        notification_data = active_notifications[-1001234567890]
        await notification_manager._send_notification(-1001234567890, notification_data)
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ—Å—Ç–∞
        await notification_manager.stop_notification(-1001234567890)
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ—Å—Ç–∞
        mock_bot.send_count = 0
        mock_bot.fail_first = True
    
    print(f"\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    print("ü§ñ Annoying Bot - –¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ Markdown")
    print("=" * 70)
    print()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
    asyncio.run(test_markdown_fix()) 