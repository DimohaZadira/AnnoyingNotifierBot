#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —Ñ–ª–æ—É –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
"""

import asyncio
import logging
import time
from datetime import datetime, timedelta
from typing import Dict
import pytz
from notification_manager import NotificationManager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class MockBot:
    def __init__(self):
        self.sent_messages = []
    
    async def send_message(self, chat_id, text):
        timestamp = datetime.now(pytz.timezone('Europe/Moscow'))
        self.sent_messages.append({
            'chat_id': chat_id,
            'text': text,
            'timestamp': timestamp
        })
        print(f"üì® [{timestamp.strftime('%H:%M:%S')}] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {text}")

class TestNotificationManager(NotificationManager):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏"""
    
    async def _notification_loop(self, user_id: int, notification_data: Dict):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –∫–æ—Ä–æ—Ç–∫–∏–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
        while True:
            try:
                now = datetime.now(self.moscow_tz)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                if not notification_data['active'] and notification_data['last_response_time']:
                    next_start = self._get_next_start_time(notification_data)
                    if now >= next_start:
                        notification_data['active'] = True
                        notification_data['last_response_time'] = None
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
                        self._save_notifications()
                        
                        logger.info(f"Resumed notifications for user {user_id} at {next_start.strftime('%H:%M')}")
                
                if notification_data['active']:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ –∞–∫—Ç–∏–≤–Ω–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–º –æ–∫–Ω–µ
                    if self._is_in_active_window(now, notification_data):
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        if self._should_send_notification(now, notification_data):
                            await self._send_notification(user_id, notification_data['message'])
                            notification_data['last_sent'] = now
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                            self._save_notifications()
                
                # –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤ (–≤–º–µ—Å—Ç–æ 60)
                await asyncio.sleep(2)
                
            except asyncio.CancelledError:
                logger.info(f"Notification loop cancelled for user {user_id}")
                break
            except Exception as e:
                logger.error(f"Error in notification loop for user {user_id}: {e}")
                await asyncio.sleep(2)

async def test_quick_pause_resume():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
    print("üß™ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
    print("=" * 60)
    
    bot = MockBot()
    manager = TestNotificationManager(bot, "test_quick.json")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
    now = datetime.now(pytz.timezone('Europe/Moscow'))
    start_time = now.strftime('%H:%M')
    
    print(f"üïê –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {start_time}")
    print(f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª: –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
    await manager.start_notification(12345, "–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç", 1, start_time)
    
    # –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    print("\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...")
    await asyncio.sleep(5)
    print(f"üìä –°–æ–æ–±—â–µ–Ω–∏–π –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞: {len(bot.sent_messages)}")
    
    # –ü—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
    print("\n‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...")
    manager.pause_notifications(12345)
    
    # –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥ - —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –¥–æ–ª–∂–Ω—ã –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è
    print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥ (—Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –¥–æ–ª–∂–Ω—ã –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è)...")
    await asyncio.sleep(10)
    messages_before = len(bot.sent_messages)
    print(f"üìä –°–æ–æ–±—â–µ–Ω–∏–π –ø–æ—Å–ª–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {messages_before}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
    active_notifications = manager.get_active_notifications()
    if 12345 in active_notifications:
        notification = active_notifications[12345]
        print(f"üìä –°—Ç–∞—Ç—É—Å: {'–∞–∫—Ç–∏–≤–Ω—ã' if notification['active'] else '–ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã'}")
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
        next_start = manager._get_next_start_time(notification)
        print(f"üïê –°–ª–µ–¥—É—é—â–µ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {next_start.strftime('%H:%M:%S')}")
        
        # –ï—Å–ª–∏ —Å–ª–µ–¥—É—é—â–µ–µ –≤—Ä–µ–º—è - –∑–∞–≤—Ç—Ä–∞, —Ç–æ –∏–∑–º–µ–Ω–∏–º –µ–≥–æ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        if next_start.date() > now.date():
            print("üîÑ –ò–∑–º–µ–Ω—è–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞...")
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–µ–º —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
            new_start_time = (now + timedelta(seconds=10)).strftime('%H:%M')
            await manager.stop_notification(12345)
            await manager.start_notification(12345, "–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç", 1, new_start_time)
            
            # –ñ–¥–µ–º –¥–æ –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞
            wait_seconds = 15  # 10 —Å–µ–∫—É–Ω–¥ + 5 —Å–µ–∫—É–Ω–¥ –±—É—Ñ–µ—Ä
            print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {wait_seconds} —Å–µ–∫—É–Ω–¥ –¥–æ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")
            await asyncio.sleep(wait_seconds)
        else:
            # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞
            wait_seconds = (next_start - datetime.now(pytz.timezone('Europe/Moscow'))).total_seconds()
            if wait_seconds > 0:
                print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {wait_seconds:.0f} —Å–µ–∫—É–Ω–¥ –¥–æ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")
                await asyncio.sleep(wait_seconds + 5)
        
        # –ñ–¥–µ–º –µ—â–µ 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")
        await asyncio.sleep(10)
        
        messages_after = len(bot.sent_messages)
        print(f"üìä –°–æ–æ–±—â–µ–Ω–∏–π –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è: {messages_after}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è
        active_notifications = manager.get_active_notifications()
        if 12345 in active_notifications:
            notification = active_notifications[12345]
            print(f"üìä –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {'–∞–∫—Ç–∏–≤–Ω—ã' if notification['active'] else '–ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã'}")
        
        if messages_after > messages_before:
            print("‚úÖ –¢–µ—Å—Ç –ü–†–û–ô–î–ï–ù: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–æ–∑–æ–±–Ω–æ–≤–∏–ª–∏—Å—å")
        else:
            print("‚ùå –¢–µ—Å—Ç –ù–ï –ü–†–û–ô–î–ï–ù: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –≤–æ–∑–æ–±–Ω–æ–≤–∏–ª–∏—Å—å")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    print("\nüìã –í—Å–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:")
    for i, msg in enumerate(bot.sent_messages, 1):
        print(f"   {i}. [{msg['timestamp'].strftime('%H:%M:%S')}] {msg['text']}")
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
    await manager.stop_notification(12345)
    manager.storage.delete_storage()
    
    print("\nüéâ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")

async def test_logic_verification():
    """–¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏"""
    print("\nüß™ –¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∏/–≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
    print("=" * 50)
    
    bot = MockBot()
    manager = TestNotificationManager(bot, "test_logic.json")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    now = datetime.now(pytz.timezone('Europe/Moscow'))
    start_time = now.strftime('%H:%M')
    
    await manager.start_notification(12345, "–¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏", 1, start_time)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    active_notifications = manager.get_active_notifications()
    if 12345 in active_notifications:
        notification = active_notifications[12345]
        print(f"‚úÖ –ù–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {'–∞–∫—Ç–∏–≤–Ω—ã' if notification['active'] else '–ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã'}")
    
    # –ü—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
    manager.pause_notifications(12345)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    active_notifications = manager.get_active_notifications()
    if 12345 in active_notifications:
        notification = active_notifications[12345]
        print(f"‚è∏Ô∏è –°—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {'–∞–∫—Ç–∏–≤–Ω—ã' if notification['active'] else '–ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã'}")
        print(f"üïê –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∞: {notification['last_response_time'].strftime('%H:%M:%S')}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    next_start = manager._get_next_start_time(notification)
    print(f"üïê –°–ª–µ–¥—É—é—â–µ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {next_start.strftime('%H:%M:%S')}")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –Ω–∞—á–∞–ª–∞
    print("üîÑ –°–∏–º—É–ª—è—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –Ω–∞—á–∞–ª–∞...")
    # –í—Ä–µ–º–µ–Ω–Ω–æ –∏–∑–º–µ–Ω—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤—á–µ—Ä–∞
    notification['last_response_time'] = now - timedelta(days=1)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å—Å—è
    next_start = manager._get_next_start_time(notification)
    should_resume = now >= next_start
    print(f"üïê –î–æ–ª–∂–Ω—ã –ª–∏ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å—Å—è: {should_resume}")
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
    await manager.stop_notification(12345)
    manager.storage.delete_storage()
    
    print("‚úÖ –¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω!")

async def test_detailed_logic():
    """–î–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –ª–æ–≥–∏–∫–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞"""
    print("\nüß™ –î–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –ª–æ–≥–∏–∫–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏")
    print("=" * 60)
    
    bot = MockBot()
    manager = TestNotificationManager(bot, "test_detailed.json")
    
    # –¢–µ—Å—Ç 1: –û—Ç–≤–µ—Ç –¥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞
    print("üìã –¢–µ—Å—Ç 1: –û—Ç–≤–µ—Ç –¥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ (09:00)")
    now = datetime.now(pytz.timezone('Europe/Moscow'))
    
    # –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–µ–º –Ω–∞—á–∞–ª–∞ 09:00
    await manager.start_notification(12345, "–¢–µ—Å—Ç 1", 1, "09:00")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –≤ 08:30
    response_time = now.replace(hour=8, minute=30, second=0, microsecond=0)
    manager.active_notifications[12345]['last_response_time'] = response_time
    manager.active_notifications[12345]['active'] = False
    
    next_start = manager._get_next_start_time(manager.active_notifications[12345])
    expected = response_time.replace(hour=9, minute=0, second=0, microsecond=0)
    
    print(f"   –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {response_time.strftime('%H:%M')}")
    print(f"   –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: 09:00")
    print(f"   –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {expected.strftime('%H:%M')}")
    print(f"   –í—ã—á–∏—Å–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {next_start.strftime('%H:%M')}")
    print(f"   ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ: {next_start == expected}")
    
    # –¢–µ—Å—Ç 2: –û—Ç–≤–µ—Ç –ø–æ—Å–ª–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞
    print("\nüìã –¢–µ—Å—Ç 2: –û—Ç–≤–µ—Ç –ø–æ—Å–ª–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ (09:00)")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –≤ 14:30
    response_time = now.replace(hour=14, minute=30, second=0, microsecond=0)
    manager.active_notifications[12345]['last_response_time'] = response_time
    
    next_start = manager._get_next_start_time(manager.active_notifications[12345])
    expected = response_time.replace(hour=9, minute=0, second=0, microsecond=0) + timedelta(days=1)
    
    print(f"   –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {response_time.strftime('%H:%M')}")
    print(f"   –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: 09:00")
    print(f"   –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {expected.strftime('%H:%M')} (—Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å)")
    print(f"   –í—ã—á–∏—Å–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {next_start.strftime('%H:%M')}")
    print(f"   ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ: {next_start == expected}")
    
    # –¢–µ—Å—Ç 3: –û—Ç–≤–µ—Ç —Ç–æ—á–Ω–æ –≤ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
    print("\nüìã –¢–µ—Å—Ç 3: –û—Ç–≤–µ—Ç —Ç–æ—á–Ω–æ –≤ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (09:00)")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –≤ 09:00
    response_time = now.replace(hour=9, minute=0, second=0, microsecond=0)
    manager.active_notifications[12345]['last_response_time'] = response_time
    
    next_start = manager._get_next_start_time(manager.active_notifications[12345])
    expected = response_time.replace(hour=9, minute=0, second=0, microsecond=0) + timedelta(days=1)
    
    print(f"   –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {response_time.strftime('%H:%M')}")
    print(f"   –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: 09:00")
    print(f"   –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {expected.strftime('%H:%M')} (—Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å)")
    print(f"   –í—ã—á–∏—Å–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {next_start.strftime('%H:%M')}")
    print(f"   ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ: {next_start == expected}")
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
    await manager.stop_notification(12345)
    manager.storage.delete_storage()
    
    print("\n‚úÖ –î–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    print("ü§ñ –ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–ª–æ—É –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
    print("=" * 70)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã
    asyncio.run(test_logic_verification())
    asyncio.run(test_quick_pause_resume())
    asyncio.run(test_detailed_logic())
    
    print("\n" + "=" * 70)
    print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!") 