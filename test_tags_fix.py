#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç–µ–≥–æ–≤
"""

import asyncio
from notification_manager import NotificationManager
from storage import NotificationStorage

class MockBot:
    """–ú–æ–∫-–æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    async def send_message(self, chat_id: int, text: str, parse_mode: str = None, message_thread_id: int = None):
        """–ò–º–∏—Ç–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è"""
        topic_info = f" (topic: {message_thread_id})" if message_thread_id else " (main chat)"
        print(f"ü§ñ –ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ —á–∞—Ç {chat_id}{topic_info}:")
        print(f"   {text}")
        print()
    
    async def get_chat_member(self, chat_id: int, user_id):
        """–ò–º–∏—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        # –ï—Å–ª–∏ user_id - —ç—Ç–æ —á–∏—Å–ª–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if isinstance(user_id, int):
            class MockUser:
                def __init__(self, user_id):
                    self.id = user_id
                    self.username = f"user{user_id}"
                    self.first_name = f"User{user_id}"
            
            class MockChatMember:
                def __init__(self, user_id):
                    self.user = MockUser(user_id)
            
            return MockChatMember(user_id)
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å @username, —Å–∏–º—É–ª–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            raise Exception(f"User {user_id} not found in chat")

async def test_tags_fix():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ç–µ–≥–æ–≤"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç–µ–≥–æ–≤")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫-–±–æ—Ç –∏ –º–µ–Ω–µ–¥–∂–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    mock_bot = MockBot()
    notification_manager = NotificationManager(mock_bot, "test_tags_fix_notifications.json")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    group_chat_id = -1001234567890
    test_message = "–ü–æ—Ä–∞ –ø–∏—Ç—å –≤–æ–¥—É!"
    interval_minutes = 30
    start_time = "09:00"
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Ç–µ–≥–æ–≤
    test_cases = [
        {
            "name": "–¢–æ–ª—å–∫–æ user_id (—á–∏—Å–ª–∞)",
            "tagged_users": [123, 456, 789],
            "description": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –ø–∏—Å–∞–ª–∏ –≤ —á–∞—Ç–µ"
        },
        {
            "name": "–¢–æ–ª—å–∫–æ username (—Å—Ç—Ä–æ–∫–∏)",
            "tagged_users": ["dimoha_zadira", "ilya_savitsky", "test_user"],
            "description": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø–∏—Å–∞–ª–∏ –≤ —á–∞—Ç–µ"
        },
        {
            "name": "–°–º–µ—à–∞–Ω–Ω—ã–µ —Ç–∏–ø—ã",
            "tagged_users": [123, "dimoha_zadira", 456, "test_user"],
            "description": "–ö–æ–º–±–∏–Ω–∞—Ü–∏—è user_id –∏ username"
        }
    ]
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"\nüìã –¢–µ—Å—Ç {i}: {test_case['name']}")
        print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {test_case['description']}")
        print(f"   –¢–µ–≥–∏: {test_case['tagged_users']}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        await notification_manager.start_notification(
            group_chat_id, test_message, interval_minutes, start_time, test_case['tagged_users']
        )
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        active_notifications = notification_manager.get_active_notifications()
        notification_data = active_notifications[group_chat_id]
        await notification_manager._send_notification(group_chat_id, notification_data)
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ—Å—Ç–∞
        await notification_manager.stop_notification(group_chat_id)
    
    print(f"\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

def test_storage_tags():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–≥–æ–≤ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–≥–æ–≤ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ")
    print("=" * 50)
    
    storage = NotificationStorage("test_tags_storage.json")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ —Ç–µ–≥–æ–≤
    test_notifications = {
        -1001234567890: {
            'message': '–¢–µ—Å—Ç —Å user_id',
            'interval_minutes': 30,
            'start_hour': 9,
            'start_minute': 0,
            'active': True,
            'chat_id': -1001234567890,
            'message_thread_id': None,
            'tagged_users': [123, 456, 789],
            'responded_users': {123}
        },
        -1009876543210: {
            'message': '–¢–µ—Å—Ç —Å username',
            'interval_minutes': 15,
            'start_hour': 10,
            'start_minute': 0,
            'active': True,
            'chat_id': -1009876543210,
            'message_thread_id': None,
            'tagged_users': ["dimoha_zadira", "ilya_savitsky"],
            'responded_users': set()
        },
        -1005555555555: {
            'message': '–¢–µ—Å—Ç —Å–æ —Å–º–µ—à–∞–Ω–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏',
            'interval_minutes': 20,
            'start_hour': 11,
            'start_minute': 0,
            'active': True,
            'chat_id': -1005555555555,
            'message_thread_id': None,
            'tagged_users': [123, "dimoha_zadira", 456],
            'responded_users': {123}
        }
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    print("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å —Ç–µ–≥–∞–º–∏...")
    success = storage.save_notifications(test_notifications)
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if success else '‚ùå –û—à–∏–±–∫–∞'}")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º
    print("üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
    loaded_notifications = storage.load_notifications()
    print(f"   –ó–∞–≥—Ä—É–∂–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {len(loaded_notifications)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
    for chat_id, notification in loaded_notifications.items():
        print(f"   –ß–∞—Ç {chat_id}:")
        print(f"     –°–æ–æ–±—â–µ–Ω–∏–µ: {notification['message']}")
        print(f"     –¢–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {notification['tagged_users']}")
        print(f"     –¢–∏–ø—ã —Ç–µ–≥–æ–≤: {[type(tag).__name__ for tag in notification['tagged_users']]}")
    
    # –û—á–∏—â–∞–µ–º
    storage.delete_storage()
    print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω")
    print()

if __name__ == "__main__":
    print("ü§ñ Annoying Bot - –¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç–µ–≥–æ–≤")
    print("=" * 70)
    print()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–≥–æ–≤
    test_storage_tags()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ç–µ–≥–æ–≤
    asyncio.run(test_tags_fix()) 