import logging
import re
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from config import BOT_TOKEN
from notification_manager import NotificationManager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class AnnoyingBot:
    def __init__(self):
        self.application = Application.builder().token(BOT_TOKEN).build()
        self.notification_manager = NotificationManager(self.application.bot)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.application.add_handler(CommandHandler("begin_notif", self.begin_notif_command))
        self.application.add_handler(CommandHandler("stop_notif", self.stop_notif_command))
        self.application.add_handler(CommandHandler("status", self.status_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("storage", self.storage_command))
        self.application.add_handler(CommandHandler("clear_all", self.clear_all_command))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
    
    async def begin_notif_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /begin_notif"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
            if len(context.args) < 3:
                await update.message.reply_text(
                    "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!\n\n"
                    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /begin_notif <—Å–æ–æ–±—â–µ–Ω–∏–µ> <–∏–Ω—Ç–µ—Ä–≤–∞–ª_–≤_–º–∏–Ω—É—Ç–∞—Ö> <–≤—Ä–µ–º—è_–Ω–∞—á–∞–ª–∞>\n\n"
                    "–ü—Ä–∏–º–µ—Ä: /begin_notif \"–ü–æ—Ä–∞ –ø–∏—Ç—å –≤–æ–¥—É!\" 30 09:00\n\n"
                    "–í—Ä–µ–º—è —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM –ø–æ –ú–æ—Å–∫–≤–µ"
                )
                return
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
            interval_str = context.args[-2]
            start_time = context.args[-1]
            message = " ".join(context.args[:-2])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
            try:
                interval_minutes = int(interval_str)
                if interval_minutes <= 0:
                    raise ValueError("–ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
            except ValueError:
                await update.message.reply_text("‚ùå –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
            if not re.match(r'^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$', start_time):
                await update.message.reply_text("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00)")
                return
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            user_id = update.effective_user.id
            await self.notification_manager.start_notification(
                user_id, message, interval_minutes, start_time
            )
            
            await update.message.reply_text(
                f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞–ø—É—â–µ–Ω—ã!\n\n"
                f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {message}\n"
                f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª: –∫–∞–∂–¥—ã–µ {interval_minutes} –º–∏–Ω—É—Ç\n"
                f"üïê –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {start_time} (–ú–°–ö)\n"
                f"üïë –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: 02:00 —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è (–ú–°–ö)\n\n"
                f"üí° –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è\n"
                f"üíæ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ –±–æ—Ç–∞"
            )
            
        except Exception as e:
            logger.error(f"Error in begin_notif command: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    
    async def stop_notif_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stop_notif"""
        try:
            user_id = update.effective_user.id
            await self.notification_manager.stop_notification(user_id)
            
            await update.message.reply_text("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
            
        except Exception as e:
            logger.error(f"Error in stop_notif command: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
        try:
            user_id = update.effective_user.id
            active_notifications = self.notification_manager.get_active_notifications()
            
            if user_id in active_notifications:
                notification = active_notifications[user_id]
                status = "üü¢ –ê–∫—Ç–∏–≤–Ω—ã" if notification['active'] else "üü° –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
                
                await update.message.reply_text(
                    f"üìä –°—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {status}\n\n"
                    f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {notification['message']}\n"
                    f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª: –∫–∞–∂–¥—ã–µ {notification['interval_minutes']} –º–∏–Ω—É—Ç\n"
                    f"üïê –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {notification['start_hour']:02d}:{notification['start_minute']:02d} (–ú–°–ö)\n"
                    f"üïë –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: 02:00 —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è (–ú–°–ö)"
                )
            else:
                await update.message.reply_text("üìä –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
                
        except Exception as e:
            logger.error(f"Error in status command: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞")
    
    async def storage_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /storage - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ"""
        try:
            storage_info = self.notification_manager.get_storage_info()
            active_notifications = self.notification_manager.get_active_notifications()
            
            if storage_info['exists']:
                await update.message.reply_text(
                    f"üíæ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ:\n\n"
                    f"üìÅ –§–∞–π–ª: {storage_info['file_path']}\n"
                    f"üìä –†–∞–∑–º–µ—Ä: {storage_info['size']} –±–∞–π—Ç\n"
                    f"üî¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {storage_info['notifications_count']}\n"
                    f"üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {len(active_notifications)}\n\n"
                    f"‚úÖ –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
                )
            else:
                await update.message.reply_text(
                    f"üíæ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ:\n\n"
                    f"üìÅ –§–∞–π–ª: –Ω–µ –Ω–∞–π–¥–µ–Ω\n"
                    f"üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {len(active_notifications)}\n\n"
                    f"‚ÑπÔ∏è –•—Ä–∞–Ω–∏–ª–∏—â–µ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏"
                )
                
        except Exception as e:
            logger.error(f"Error in storage command: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ")
    
    async def clear_all_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /clear_all - –æ—á–∏—â–∞–µ—Ç –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            await self.notification_manager.clear_all_notifications()
            
            await update.message.reply_text(
                "üóëÔ∏è –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã!\n\n"
                "‚úÖ –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã\n"
                "üíæ –§–∞–π–ª —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —É–¥–∞–ª–µ–Ω"
            )
            
        except Exception as e:
            logger.error(f"Error in clear_all command: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
ü§ñ *Annoying Bot - –ü–æ–º–æ—â—å*

*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*

/begin\\_notif <—Å–æ–æ–±—â–µ–Ω–∏–µ> <–∏–Ω—Ç–µ—Ä–≤–∞–ª> <–≤—Ä–µ–º—è\\_–Ω–∞—á–∞–ª–∞>
–ó–∞–ø—É—Å–∫–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏

–ü—Ä–∏–º–µ—Ä: `/begin_notif "–ü–æ—Ä–∞ –ø–∏—Ç—å –≤–æ–¥—É!" 30 09:00`

/stop\\_notif
–ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

/status
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

/storage
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ

/clear\\_all
–û—á–∏—â–∞–µ—Ç –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)

/help
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

*–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:*
‚Ä¢ –ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ N –º–∏–Ω—É—Ç
‚Ä¢ –†–∞–±–æ—Ç–∞–µ—Ç —Å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ 02:00 —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è
‚Ä¢ –ï—Å–ª–∏ –≤—ã –æ—Ç–≤–µ—á–∞–µ—Ç–µ –Ω–∞ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è
‚Ä¢ –í—Ä–µ–º—è —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ –ú–æ—Å–∫–≤–µ (–ú–°–ö)
‚Ä¢ **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ –±–æ—Ç–∞**

*–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:*
‚Ä¢ <—Å–æ–æ–±—â–µ–Ω–∏–µ> - —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
‚Ä¢ <–∏–Ω—Ç–µ—Ä–≤–∞–ª> - –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º–∏–Ω—É—Ç–∞—Ö (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ)
‚Ä¢ <–≤—Ä–µ–º—è\\_–Ω–∞—á–∞–ª–∞> - –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00)

*–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:*
‚Ä¢ üíæ –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —Ñ–∞–π–ª
‚Ä¢ üîÑ –ü—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ –±–æ—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è
‚Ä¢ ‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–æ–∑–æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        """
        
        await update.message.reply_text(help_text, parse_mode='MarkdownV2')
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            user_id = update.effective_user.id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            active_notifications = self.notification_manager.get_active_notifications()
            if user_id in active_notifications:
                # –ü—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è
                self.notification_manager.pause_notifications(user_id)
                
                await update.message.reply_text(
                    "‚è∏Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è!\n\n"
                    "üí° –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–æ–∑–æ–±–Ω–æ–≤—è—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞\n"
                    "üíæ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ"
                )
            else:
                await update.message.reply_text(
                    "üëã –ü—Ä–∏–≤–µ—Ç! –Ø Annoying Bot.\n\n"
                    "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º\n"
                    "üíæ –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ"
                )
                
        except Exception as e:
            logger.error(f"Error handling message: {e}")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
        logger.info("Starting Annoying Bot...")
        self.application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    bot = AnnoyingBot()
    bot.run() 